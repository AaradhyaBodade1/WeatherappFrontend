pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID = 'Git' // Replace with your SSH credential ID in Jenkins
        GIT_REPO_URL = 'git@github.com:AaradhyaBodade1/weatherapp-1.git'
        GIT_BRANCH = 'main'
        REGION = 'ap-south-1'
        ECR_REPO_URI = '650089658128.dkr.ecr.ap-south-1.amazonaws.com/frontend'
        CLUSTER_NAME = 'eks-cluster'
        DEPLOYMENT_NAME = 'frontend-deployment'
        DOCKERFILE_DIR = '/home/ubuntu/weatherapp-1/Frontend/weather-app'
        DOCKER_IMAGE_TAG = "${ECR_REPO_URI}:latest"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: env.GIT_BRANCH,
                    credentialsId: env.GIT_CREDENTIALS_ID,
                    url: env.GIT_REPO_URL
            }
        }

        stage('Build Docker Image') {
            steps {
                dir(env.DOCKERFILE_DIR) {
                    sh "docker build -t ${DOCKER_IMAGE_TAG} ."
                }
            }
        }
        stage('Configure AWS CLI') {
    steps {
        script {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding', 
                credentialsId: 'aws-secret-key'
            ]]) {
                // Use credentials stored in Jenkins
                sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                    aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                    aws configure set default.region ${REGION}
                '''
            }
        }
    }
}stage('Login Docker') {
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 211125497477.dkr.ecr.ap-south-1.amazonaws.com
                    '''
                }
            }
        }



     stage('Push Image') {
            steps {
                script {
                    sh "docker push ${ECR_REPO_URI}:${ENV}-${BUILD_NUMBER}"
                }
            }
        }


        stage('Deploy to EKS') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-secret-key'
                ]]) {
                    sh '''
                        aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}
                        kubectl set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${DOCKER_IMAGE_TAG}
                    '''
                }
            }
        }
    }
}
